Below is a lightweight design-doc you can drop into the repo (call it `DEPLOYING_TO_NETLIFY.md`).  It walks through the current (mid-2025) state of Netlify Functions and the few moving parts you need to wire an Angular SPA + a tiny OpenAI proxy into a single Netlify deploy.

---

## 0 · TL;DR

* Angular gets built to `dist/` and served as plain static files.
* Your lone Express route becomes a Netlify **Function** living in `netlify/functions/`.
* A single `netlify.toml` glues the two worlds together:

  * declares the build + publish dirs
  * tells Netlify where the functions live
  * adds a rewrite so calls from `/api/*` hit the function.
* Dev locally with `netlify dev` (it spins up `ng serve` **and** emulates the function layer).
* Secrets (e.g., `OPENAI_API_KEY`) live in Netlify’s “Environment variables” UI, *Runtime* scope.
* Default runtime is Node 22 as of Feb 24 2025; bump or pin via `AWS_LAMBDA_JS_RUNTIME=nodejs22.x` if you need something else. ([Netlify Support Forums][1])

---

## 1 · Directory Layout

```
/
├─ angular.json
├─ src/            # Angular code
├─ dist/           # created at build
├─ netlify.toml
└─ netlify/
   └─ functions/
      └─ openaiProxy.js
```

You can keep the rest of your Node tooling (tests, lint configs, etc.) at repo-root; Netlify only zips what’s in `netlify/functions/*` when it builds the lambdas.

---

## 2 · netlify.toml (single-file config)

```toml
[build]
  command = "ng build --configuration=production"
  publish = "dist/personify"   # adjust if your output folder differs

[functions]
  directory = "netlify/functions"
  node_bundler = "esbuild"     # modern, plays nicely with ESM

# SPA fallback for Angular router deep-links
[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200

# Route anything under /api/* to the OpenAI proxy function
[[redirects]]
  from = "/api/*"
  to = "/.netlify/functions/openaiProxy/:splat"
  status = 200
```

*The generic SPA redirect is straight from Netlify’s Angular docs* ([Stack Overflow][2])
*The function rewrite pattern is the officially blessed way to put a clean path in front of a lambda* ([Netlify Docs][3])

---

## 3 · The Function

If you don’t actually need Express (one route, trivial logic) kill the extra dependency and do a vanilla handler:

```js
// netlify/functions/openaiProxy.js
import { OpenAI } from "openai";

export const handler = async (event) => {
  const body = JSON.parse(event.body || "{}");
  const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

  const completion = await openai.chat.completions.create({
    model: body.model ?? "gpt-4o-mini",
    messages: body.messages ?? [],
  });

  return {
    statusCode: 200,
    body: JSON.stringify(completion),
    headers: { "Content-Type": "application/json" },
  };
};
```

Need the familiar Express ergonomics?  Wrap it:

```js
import express from "express";
import serverless from "serverless-http";
const app = express();
app.use(express.json());

app.post("/openai", async (req, res) => { /* …same logic… */ });

export const handler = serverless(app);
```

Netlify’s own “Express on Netlify” page still recommends that `serverless-http` wrapper and warns about the 10 s default / 26 s max execution window—adequate for a single OpenAI round-trip. ([Netlify Docs][3], [Netlify Support Forums][4])

---

## 4 · Build & Deploy Pipeline

1. **Install CLI once**

   ```bash
   npm i -g netlify-cli
   netlify login
   ```

2. **Wire the repo** (creates a site in your account & stores site-id in `.netlify/state.json`)

   ```bash
   netlify init    # choose "Deploy settings detected" → Angular
   ```

3. **Local dev**

   ```bash
   netlify dev     # proxies :4200, :8888, reads redirects, loads env vars
   ```

   Under the hood `netlify dev` launches `ng serve` automatically because the framework detector knows Angular. ([Netlify Docs][5])

4. **Set secrets**
   *Netlify UI → Site settings → Environment variables → add `OPENAI_API_KEY`, scope = Runtime.*

5. **Continuous deployment (CI/CD)**
   Push to `main`; Netlify runs the build, bundles the function, and atomically swaps the site.

---

## 5 · Runtime & Node versions

* Minimum is Node 18; default bumped to **Node 22** for all new deployments after Feb 24 2025. ([Netlify Support Forums][1])
* Override per-site or per-function by setting `AWS_LAMBDA_JS_RUNTIME=nodejs20.x` (or whatever) in env vars. ([Netlify Docs][6])

---

## 6 · Gotchas & Tips

| Problem                                                | Fix                                                                                                          |
| ------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------ |
| **CORS** from your Angular app hitting `/api/*` in dev | With `netlify dev` you don’t need a separate `proxy.conf.json`; the CLI rewrites locally exactly as in prod. |
| **Cold-start latency**                                 | Keep the function slim; avoid heavyweight OpenAI clients per call (reuse them if you store outside handler). |
| **Binary size limits**                                 | Anything under 50 MB zipped is fine; your proxy + `openai` + `serverless-http` is \~10 MB.                   |
| **Time limit**                                         | 10 s default, opt-in 26 s via `functions.timeout = 26` in `netlify.toml` if you need it.                     |

---

### Next Steps for You

1. Drop the TOML and function stub into the repo.
2. Run `netlify init && netlify dev` to sanity-check local calls (`http://localhost:8888/api/openai`).
3. Push to GitHub; let Netlify build; profit.

Ping me once you smash into anything weird—we can tune from there.

[1]: https://answers.netlify.com/t/builds-functions-plugins-default-node-js-version-upgrade-to-22/135981 "Builds + Functions + Plugins: Default Node.js version upgrade to 22 - Updates - Netlify Support Forums"
[2]: https://stackoverflow.com/questions/59308045/netlify-deployment-issue-netlify-toml-settings-for-spa?utm_source=chatgpt.com "netlify Deployment issue: netlify.toml settings for SPA - Stack Overflow"
[3]: https://docs.netlify.com/frameworks/express/?utm_source=chatgpt.com "Express on Netlify"
[4]: https://answers.netlify.com/t/serverless-http-timeouts-on-netlify-functions-local-enviroment/49063?utm_source=chatgpt.com "Serverless-http timeouts on netlify functions local enviroment - Support"
[5]: https://docs.netlify.com/functions/get-started/?utm_source=chatgpt.com "Get started with functions | Netlify Docs"
[6]: https://docs.netlify.com/functions/optional-configuration/?utm_source=chatgpt.com "Optional configuration for functions | Netlify Docs"
